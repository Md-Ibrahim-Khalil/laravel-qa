01.01.2020

composer create-project --prefer-dist laravel/laravel laravel-qa "5.8.*"
cd laravel_qa
git init
git add .
git commit -m "Initial commit"
Create a repository in github
git remote add origin https://github.com/Md-Ibrahim-Khalil/laravel-qa.git
git branch -M main
git push -u origin main
npm install
php artisan make:auth

Create database in localhost-> laravel_qa

open code file => code .

In config->database.php
    'charset' => 'utf8',
            'collation' => 'utf8_unicode_ci',
php artisan migrate

Git setting:
git add .
git commit -m "generate auth scaffolding & install npm packages"
git branch -M main
git push -u origin main

--------
git branch
create new branch->
    git checkout -b lesson-2


php artisan make:model Question -m
In questions Table->

             $table->increments('id');
            $table->string('title');
            $table->string('slug')->unique();
            $table->text('body');
            $table->unsignedInteger('views')->default(0);
            $table->unsignedInteger('answers')->default(0);
            $table->integer('votes')->default(0);
            $table->unsignedInteger('best_answer_id')->nullable();
            $table->unsignedBigInteger('user_id');

            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');

            migrations:
            php artisan migrate:fresh
            php artisan migrate:reset


In Question.php
        protected $fillable = ['title', 'body'];

        public function user() {
            return $this->belongTo(User::class);
        }
User.php
         public function questions()
         {
            return $this->hasMany(Question::class);
         }

        public function setTitleAttribute($value)
        {
            $this->attributes['title'] = $value;
            $this->attributes['slug'] = str_slug($value);
        }
In terminal:
            php artisan tinker
            $str = "my first question"
            str_slug($str)
            and exit to close

Git:
        git status (to check the update files)
        git add .
        git commit -m "Generate Question model via artisan model generator"
        git push origin lesson-2
        git checkout main
        git merge lesson-2
        git push origin main

4=>  Generating fake data via model factories
    Generating new branch ->
                            git checkout -b lesson-3

php artisan make:factory QuestionFactory

In Database,factories,QuestionFactory =>
        return [
        'title' => rtrim($faker->sentence(rand(5, 10)), ".")
        ];
In terminal ->
            php artisan tinker

            use Faker\Factory;

            $faker = Factory::create();
            $faker->sentence()
            rtrim($faker->sentence(), ".")

Again Database,factories,QuestionFactory =>

                    'title' => rtrim($faker->sentence(rand(5, 10)), "."),
                    'body' => $faker->paragraphs(rand(3, 7), true),
                    'views' => rand(0, 10),
                    'answers' => rand(0, 10),
                    'votes' => rand(-3, 10)

Again In terminal ->
            php artisan tinker
            factory(App\User::class, 3)->create()


 5=>  Generating fake data via model factories

    In seeds,DatabaseSeeder.php  =>

            factory(App\User::class, 3)->create()->each(function($u) {
            $u->question()
              ->saveMany(
                    factory(App\Question::class, rand(1, 5))->make()
              );

            });
            // factory(App\Question::class, 10)->create();


In terminal ->

php artisan make:factory QuestionFactory --model=Question

In factories,QuestionFactory.php->

        'title' => rtrim($faker->sentence(rand(5, 10)), "."),
        'slug' => $faker->slug,
        'body' => $faker->paragraphs(rand(3, 7), true),
        'views' => rand(1, 100),
        'answers' => rand(1, 4),
        'votes' => rand(1, 10),
        'best_answer_id' => rand(1, 100),
        'user_id' => rand(1, 100),
php artisan db:seed

DAY 6(Displaying all questions)->

php artisan make:controller QuestionsController --resource --model=Question
In web,Route.php->

    Route::resource('questions', 'QuestionsController');

QuestionsController.php=>

    public function index()
        {
            $questions = Question::latest()->paginate(5);
            return view('questions.index', compact('questions'));
        }
and create questions,index.blade.php=>

                <div class="card-header">All Questions</div>

                <div class="card-body">
                    @foreach($questions as $question)
                    <div class="media">
                        <div class="media-body">
                            <h3 class="mt-0">{{ $question->title }}</h3>
                            {{ str_limit($question->body, 250) }}
                        </div>
                    </div>
                    <hr>
                    @endforeach

                    <div class="text-center">
                        {{ $questions->links() }}
                    </div>

php artisan vendor:publish --tag=laravel-pagination
vendor,pagination,bootstrap-4.blade.php =>
    <ul class="pagination" role="navigation"> to
    <ul class="pagination justify-content-center" role="navigation">
